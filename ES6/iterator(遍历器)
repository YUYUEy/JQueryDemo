-----------iterator(遍历器)----------
任何数据结构，只要部署了iterator接口，就可以完成遍历操作（依次处理该数据结构的所有成员）
Iterator接口主要供for...of消费

Iterator的遍历过程如下：
    1.创建一个指针对象，指向当前数据结构的起始位置，也就是说，遍历器对象本质就是一个指针对象。
    2.第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员，
    3.第二次调用指针对象的next方法，指针就指向数据结构的第二个成员，
    4.不断调用指针对象的next方法，直到它指向数据结构的结束位置。
---------------------------------
下面是模拟next方法返回值的例子
var it = makeIterator(['a','b']);
function makeIterator(array){
	var nextIndex =0;
	return{
		next: function(){
			return nextIndex <array.length ?{value:array[nextIndex++],done:false} :{value: undefined,done: true};
		}
	}
};
it.next()   //{value: "a", done: false}
it.next()   //{value: "b", done: false}
it.next()   //{value: undefined, done: true}

上面的makeIterator函数，是一个遍历器生成函数，作用就是返回一个遍历器，；对数组 ['a','b'] 执行这个函数，
就会返回该数组的遍历器对象（即指针对象）it
-----------------------
